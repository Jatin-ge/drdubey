// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
enum GenderType {
  Male
  Female
  OTHER
}


model Lead {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String?
  phone String?
  age Int?
  remark String?
  address String? 
  gender GenderType? @default(Male)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  patientStatus String?
  doad DateTime?
  dood DateTime? 
  dx String?
  surgery String?
  side Side @default(LEFT)
  implant  String? 
  ipdReg Int?
  bill Int?
  tpa TPA @default(Private)
  payment Payments[]
  cities String?
  }

model Payments {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  userPaymentId String @db.ObjectId
  payment Lead @relation(fields: [userPaymentId], references: [id])
  amount Int
  mode PaymentMode
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}
enum LeadStatus {
  PENDING
  CONTACTED
  CONVERTED
  LOST
}

enum PaymentMode {
  CASH
  CARD
  UPI
  NETBANKING
}



enum Side {
  LEFT
  RIGHT
  BOTH
}

enum TPA {
  Private
  Cash
  Schemes

}

enum Implant {
  JandJ
  Maxx
  Zimmer
  Stryker
  SandN
}

enum OpInfo {
  Single_Knee_Replacement
  Both_Knee_Replacement
  Hip_Replacement
}

model Profile{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  name String 
  imageUrl String 
  email String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  appointments Appointment[]

}
model Appointment{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  user Profile @relation(fields: [userId], references: [userId])
  name String
  date String
  time String
  phone String
  email String
  cityname String
  city Cities @relation(fields: [cityname], references: [name])
  age Int
  address String
  gender GenderType @default(Male)
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  description String?
  discussionTitle String?
  discussionDescription String?
}



// This is for the calendar  management

model Cities{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  days Day[]
  closeddays ClosedDay[]
  appointments Appointment[]

}


model Day {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  cityname String
  city Cities @relation(fields: [cityname], references: [name])

  name String
  dayOfWeek Int // @see getDay() documentation, 0 for Sunday, 1 for Monday, ...
  openTime  String
  closeTime String

}

model ClosedDay {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  cityname String
  city Cities @relation(fields: [cityname], references: [name])
  date DateTime 
}

model ContactUs{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String
  message String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}


model YouTube {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  link String
  createdAt DateTime @default(now())
}



model Services {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  subtitle String
  blog     String
  image    String
  slug  String? 
  metaTitle     String?
  metaDescription String?
  metaKeywords  String?
}


model Blogs {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  slug  String? 
  subtitle1 String
  content1     String
  image1    String
  subtitle2 String?
  content2     String?
  image2  String?
  metaTitle     String?
  metaDescription String?
  metaKeywords  String?
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl String
  description String
}